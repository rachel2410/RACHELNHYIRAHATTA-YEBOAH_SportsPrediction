# -*- coding: utf-8 -*-
"""RACHELNHYIRAHATTA-YEBOAH_SportsPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ka8ehlxhi8odwNcv0CULpqdhqLDo661z
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from google.colab import drive
drive.mount('/content/drive')

train_data = pd.read_csv("/content/drive/My Drive/male_players (legacy).csv")
test_data = pd.read_csv("/content/drive/My Drive/players_22.csv")

train_data.head()

train_data.drop(['player_url', 'fifa_update_date', 'dob', 'club_jersey_number', 'club_loaned_from', 'nationality_id', 'nation_team_id', 'nation_jersey_number', 'release_clause_eur', 'mentality_composure', 'player_face_url'], axis = 1, inplace = True)

train_data.info()

L=[]
L_less=[]
for i in train_data.columns:
  if((train_data[i].isnull().sum())<(0.4*(train_data.shape[0]))):
    L_less.append(i)
  else:
    L.append(i)

train_data = train_data[L_less]

numeric_data=train_data.select_dtypes(include=np.number)
non_numeric=train_data.select_dtypes(include = ['object'])

numeric_data.info()

numeric_corr = numeric_data.corr()
numeric_corr

top_features = numeric_corr['overall'].sort_values(ascending = False).index[1:11]
features = numeric_data[top_features]
final = numeric_data['overall']

numeric_data.drop('fifa_update', axis = 1)

from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer

imp = IterativeImputer(max_iter=10, random_state=0)

numeric_data = pd.DataFrame(np.round(imp.fit_transform(numeric_data)), columns=numeric_data.copy().columns)

train_data['overall'].isnull().sum()

numeric_data['overall'].isnull().sum()

"""#### NON NUMERIC"""

y = non_numeric['league_name']

y,actual_values = pd.factorize(y)

non_numeric.drop('league_name', axis = 1, inplace = True)

from sklearn.preprocessing import LabelEncoder, OneHotEncoder

for column in non_numeric.columns:
    label_encoder = LabelEncoder()
    non_numeric[column] = label_encoder.fit_transform(non_numeric[column].astype(str))

onehot_encoder = OneHotEncoder(sparse = False)
integer_encoded = non_numeric[column].reshape(len(non_numeric[column]), 1)
integer_encoded

onehot_encoded = onehot_encoder.fit_transform(integer_encoded)
print(onehot_encoded)

X = pd.concat([numeric_data, non_numeric[column]], axis = 1)
X.head()

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled_train_data = scaler.fit_transform(X)
scaled_train_data = pd.DataFrame(scaled_train_data, columns = X.columns)

pd.Series(y).value_counts()

"""#### TRAINING"""

Xtrain,Xtest,Ytrain,Ytest=train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestRegressor

lr = LinearRegression()
dt = DecisionTreeClassifier(criterion='entropy')
rf = RandomForestRegressor(random_state=42)

from sklearn.metrics import mean_squared_error, r2_score
import pickle as pkl

for model in (lr, dt, rf): #
  model.fit(Xtrain, Ytrain)
  pkl.dump(model, open('male_players (legacy).csv' + model.__class__.__name__ + '.pkl', 'wb'))
  y_pred = model.predict(Xtest)

  mse = mean_squared_error(Ytest, y_pred)
  r2 = r2_score(Ytest, y_pred)
  print(f"{model} MSE: {mse:.2f}, R2: {r2}")

from sklearn.model_selection import GridSearchCV, KFold

cv=KFold(n_splits=3)
param_rf ={
    "max_depth":[3,5, 6, 12],
    "min_samples_leaf":[1,5,10],
    "min_samples_split":[2,5,10],
    "n_estimators":[100,500,1000]}

model_gs = GridSearchCV(rf, param_rf, cv=cv, scoring="neg_mean_squared_error")

model_gs.fit(Xtrain, Ytrain)

pkl.dump(model_gs, open('male_players (legacy)' + model_gs.__class__.__name__ + '.pkl', 'wb'))
y_pred = model_gs.predict(Xtest)
print(model_gs.__class__.__name__, mean_squared_error(y_test, y_pred))

"""#### TESTING"""

test_data.head()

test_data.drop(['player_url', 'dob', 'club_jersey_number', 'club_joined_from', 'nationality_id', 'nation_team_id', 'nation_jersey_number', 'player_face_url', 'club_logo_url', 'club_flag_url', 'nation_logo_url', 'nation_flag_url'], axis = 1, inplace = True)

T=[]
T_less=[]
for i in test_data.columns:
  if((test_data[i].isnull().sum())<(0.4*(test_data.shape[0]))):
    T_less.append(i)
  else:
    T.append(i)

test_data = test_data[T_less]

test_numeric_data=train_data.select_dtypes(include=np.number)
test_non_numeric=train_data.select_dtypes(include = ['object'])

test_numeric_data.info()

test_numeric_corr = test_numeric_data.corr()
test_numeric_corr

top_test_features = test_numeric_corr['overall'].sort_values(ascending = false).index[1:11]
test_features = test_numeric_data[top_features]
final_test = test_numeric_data['overall']

test_numeric_data.drop('fifa_update', axis = 1)#

imp = IterativeImputer(max_iter=10, random_state=0)
numeric_data = pd.DataFrame(np.round(imp.fit_transform(test_numeric_data)), columns = test_numeric_data.copy().columns)

test_data['overall'].isnull().sum()

test_numeric_data['overall'].isnull().sum()

"""##### NON NUMERIC: TEST DATASET"""

y = test_non_numeric['league_name']#

y,actual_values = pd.factorize(y)

test_non_numeric.drop('league_name', axis = 1, inplace = True)#

for column in test_non_numeric.columns:
    #label_encoder = LabelEncoder()
    test_non_numeric[column] = label_encoder.fit_transform(test_non_numeric[column].astype(str))

#onehot_encoder = OneHotEncoder(sparse = False)
int_encoded = test_non_numeric[column].reshape(len(test_non_numeric[column]), 1)
int_encoded

onehot_encoded = onehot_encoder.fit_transform(int_encoded)
print(onehot_encoded)

X = pd.concat([numeric_data, test_non_numeric[column]], axis = 1)
X.head()

scaled = StandardScaler()
scaled_test_data = scaled.fit_transform(X)
scaled_test_data = pd.DataFrame(scaled_test_data, columns = X.columns)

pd.Series(y).value_counts()

"""#### TRAINING THE TEST DATASET"""

#random forest
rf.fit(X_train, y_train)
  #pkl.dump(model, open('players_22' + model.__class__.__name__ + '.pkl', 'wb'))
y_pred = rf.predict(Xtest)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"{model} MSE: {mse:.2f}, R2: {r2}")

"""##### Tuning"""

#cv=KFold(n_splits=3)
#param_rf ={
#    "max_depth":[3,5, 6, 12],
#    "min_samples_leaf":[1,5,10],
#    "min_samples_split":[2,5,10],
#    "n_estimators":[100,500,1000]}

#model_gs = GridSearchCV(rf, param_rf, cv=cv, scoring="neg_mean_squared_error")
#model_gs.fit(Xtrain, Ytrain)
pkl.dump(model_gs, open('players_22' + model_gs.__class__.__name__ + '.pkl', 'wb'))
#y_pred = model_gs.predict(Xtest)
print(model_gs.__class__.__name__, mean_squared_error(Ytest, y_pred))